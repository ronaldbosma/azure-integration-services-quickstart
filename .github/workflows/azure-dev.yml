name: azure-dev

on:
  workflow_dispatch:
    inputs:
      cleanup_resources:
        description: 'Clean up resources after deployment'
        required: false
        default: true
        type: boolean
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  build-verify-package:
    name: Build, Verify and Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'
        # This template uses a workaround to deploy the Logic App workflow, which requires the npm CLI.

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Install azd
      uses: Azure/setup-azd@v2

    - name: Configure AZD to Use AZ CLI Authentication
      shell: pwsh
      run: |
        azd config set auth.useAzCliAuth "true"

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Bicep Lint
      run: |
        az bicep lint --file ./infra/main.bicep

    - name: Package Function App
      run: |
        mkdir -p ./dist
        azd package functionApp --output-path ./dist/functionapp-package.zip --no-prompt

    - name: Package Logic App
      run: |
        azd package logicApp --output-path ./dist/logicapp-package.zip --no-prompt

    - name: Upload Function App Package
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-package
        path: ./dist/functionapp-package.zip
        retention-days: 1

    - name: Upload Logic App Package
      uses: actions/upload-artifact@v4
      with:
        name: logicapp-package
        path: ./dist/logicapp-package.zip
        retention-days: 1

  deploy:
    name: Deploy to Azure
    needs: build-verify-package
    runs-on: ubuntu-latest
    environment: aisquick
    outputs:
      azure-env-name: ${{ steps.get-env-name.outputs.azure-env-name }}
    env:
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      INCLUDE_API_MANAGEMENT: ${{ vars.INCLUDE_API_MANAGEMENT }}
      INCLUDE_EVENT_HUBS_NAMESPACE: ${{ vars.INCLUDE_EVENT_HUBS_NAMESPACE }}
      INCLUDE_FUNCTION_APP: ${{ vars.INCLUDE_FUNCTION_APP }}
      INCLUDE_LOGIC_APP: ${{ vars.INCLUDE_LOGIC_APP }}
      INCLUDE_SERVICE_BUS: ${{ vars.INCLUDE_SERVICE_BUS }}
      INCLUDE_APPLICATION_INFRA_RESOURCES: ${{ vars.INCLUDE_APPLICATION_INFRA_RESOURCES }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install azd
      uses: Azure/setup-azd@v2

    - name: Configure AZD to Use AZ CLI Authentication
      shell: pwsh
      run: |
        azd config set auth.useAzCliAuth "true"

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Provision Infrastructure
      run: |
        azd provision --no-prompt

    - name: Download Function App Package
      uses: actions/download-artifact@v4
      with:
        name: functionapp-package
        path: ./artifacts

    - name: Download Logic App Package
      uses: actions/download-artifact@v4
      with:
        name: logicapp-package
        path: ./artifacts

    - name: Deploy Function App
      if: env.INCLUDE_FUNCTION_APP == 'true'
      run: |
        azd deploy functionApp --from-package ./artifacts/functionapp-package.zip --no-prompt

    - name: Deploy Logic App
      if: env.INCLUDE_LOGIC_APP == 'true'
      run: |
        azd deploy logicApp --from-package ./artifacts/logicapp-package.zip --no-prompt

    - name: Get Environment Name for Cleanup
      id: get-env-name
      run: |
        echo "azure-env-name=${{ env.AZURE_ENV_NAME }}" >> $GITHUB_OUTPUT

  cleanup:
    name: Clean Up Resources
    needs: [build-verify-package, deploy]
    if: |
      always() && 
      needs.build-verify-package.result == 'success' &&
      (
        (github.event_name == 'workflow_dispatch' && 
         github.event.inputs.cleanup_resources == 'true') ||
        (github.event_name != 'workflow_dispatch' && 
         needs.deploy.result == 'success')
      )
    runs-on: ubuntu-latest
    environment: aisquick
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PowerShell
      shell: pwsh
      run: |
        # PowerShell Core is pre-installed on ubuntu-latest
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Install azd
      uses: Azure/setup-azd@v2

    - name: Configure AZD to Use AZ CLI Authentication
      shell: pwsh
      run: |
        azd config set auth.useAzCliAuth "true"

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Cleanup Resources
      run: |
        azd down --purge --force --no-prompt
      env:
        AZURE_ENV_NAME: ${{ needs.deploy.outputs.azure-env-name }}

    - name: Verify Resource Cleanup
      run: |
        echo "âœ… Resource cleanup completed"
        echo "Environment '${{ needs.deploy.outputs.azure-env-name }}' has been cleaned up"
        echo "All Azure resources have been removed and purged"
        
