name: azure-dev

on:
  workflow_dispatch:
    inputs:
      cleanup_resources:
        description: 'Clean up resources after deployment'
        required: false
        default: true
        type: boolean
  pull_request:
    branches: [ main ]

permissions:
  id-token: write # Required to fetch an OIDC token for Azure authentication
  contents: read  # Required to checkout code if needed

env:
  AZURE_ENV_NAME: 'aisquick'
  AZURE_LOCATION: 'swedencentral'
  INCLUDE_API_MANAGEMENT: true
  INCLUDE_EVENT_HUBS_NAMESPACE: true
  INCLUDE_FUNCTION_APP: true
  INCLUDE_LOGIC_APP: true
  INCLUDE_SERVICE_BUS: true
  INCLUDE_APPLICATION_INFRA_RESOURCES: true

jobs:
  build-verify-package:
    name: Build, Verify and Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # This template uses a workaround to deploy the Logic App workflow, which requires the npm CLI.
    - name: Setup Node.js
      if: env.INCLUDE_LOGIC_APP == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'

    - name: Install azd
      uses: Azure/setup-azd@v2

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Bicep Lint
      run: |
        az bicep lint --file ./infra/main.bicep

    - name: Create artifacts folder
      if: env.INCLUDE_FUNCTION_APP == 'true' || env.INCLUDE_LOGIC_APP == 'true'
      run: |
        mkdir -p ./artifacts

    - name: Package Function App
      if: env.INCLUDE_FUNCTION_APP == 'true'
      run: |
        azd package functionApp --output-path ./artifacts/functionapp-package.zip --no-prompt

    - name: Upload Function App Package
      if: env.INCLUDE_FUNCTION_APP == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-package
        path: ./artifacts/functionapp-package.zip
        retention-days: 1

    - name: Package Logic App
      if: env.INCLUDE_LOGIC_APP == 'true'
      run: |
        azd package logicApp --output-path ./artifacts/logicapp-package.zip --no-prompt

    - name: Upload Logic App Package
      if: env.INCLUDE_LOGIC_APP == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: logicapp-package
        path: ./artifacts/logicapp-package.zip
        retention-days: 1

  deploy:
    name: Deploy to Azure
    needs: build-verify-package
    runs-on: ubuntu-latest
    environment: aisquick
    outputs:
      azure-resource-group: ${{ steps.get-outputs.outputs.azure-resource-group }}
      azure-log-analytics-workspace-name: ${{ steps.get-outputs.outputs.azure-log-analytics-workspace-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install azd
      uses: Azure/setup-azd@v2

    - name: Configure AZD to Use AZ CLI Authentication
      shell: pwsh
      run: |
        azd config set auth.useAzCliAuth "true"

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Provision Infrastructure
      uses: azure/cli@v2
      with:
        azcliversion: latest
        shell: pwsh
        inlineScript: |
          azd provision --no-prompt

    - name: Download Function App Package
      if: env.INCLUDE_FUNCTION_APP == 'true'
      uses: actions/download-artifact@v4
      with:
        name: functionapp-package
        path: ./artifacts

    - name: Deploy Function App
      if: env.INCLUDE_FUNCTION_APP == 'true'
      uses: azure/cli@v2
      with:
        azcliversion: latest
        shell: pwsh
        inlineScript: |
          azd deploy functionApp --from-package ./artifacts/functionapp-package.zip --no-prompt

    - name: Download Logic App Package
      if: env.INCLUDE_LOGIC_APP == 'true'
      uses: actions/download-artifact@v4
      with:
        name: logicapp-package
        path: ./artifacts

    - name: Deploy Logic App
      if: env.INCLUDE_LOGIC_APP == 'true'
      uses: azure/cli@v2
      with:
        azcliversion: latest
        shell: pwsh
        inlineScript: |
          azd deploy logicApp --from-package ./artifacts/logicapp-package.zip --no-prompt

    - name: Get Output Variables
      id: get-outputs
      uses: azure/cli@v2
      with:
        azcliversion: latest
        shell: pwsh
        inlineScript: |
          $resourceGroup = (azd env get-values | Select-String "AZURE_RESOURCE_GROUP").ToString().Split('=')[1]
          $logWorkspace = (azd env get-values | Select-String "AZURE_LOG_ANALYTICS_WORKSPACE_NAME").ToString().Split('=')[1]
          echo "azure-resource-group=$resourceGroup" >> $env:GITHUB_OUTPUT
          echo "azure-log-analytics-workspace-name=$logWorkspace" >> $env:GITHUB_OUTPUT

  cleanup:
    name: Clean Up Resources
    needs: [build-verify-package, deploy]
    if: |
      always() && 
      needs.build-verify-package.result == 'success' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.cleanup_resources == 'true') ||
        (github.event_name != 'workflow_dispatch' && needs.deploy.result == 'success')
      )
    runs-on: ubuntu-latest
    environment: aisquick
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install azd
      uses: Azure/setup-azd@v2

    - name: Configure AZD to Use AZ CLI Authentication
      shell: pwsh
      run: |
        azd config set auth.useAzCliAuth "true"

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Cleanup Resources
      uses: azure/cli@v2
      with:
        azcliversion: latest
        shell: pwsh
        inlineScript: |
          azd down --purge --force --no-prompt
      env:
        AZURE_RESOURCE_GROUP: ${{ needs.deploy.outputs.azure-resource-group }}
        AZURE_LOG_ANALYTICS_WORKSPACE_NAME: ${{ needs.deploy.outputs.azure-log-analytics-workspace-name }}
        
